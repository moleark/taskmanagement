{"version":3,"sources":["tonva/entry/res/login.ts","tonva/entry/res/register.ts","tonva/entry/tools.tsx","tonva/entry/register.tsx","tonva/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","components","loginTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","_super","RegisterController","_this","apply","this","arguments","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","login","tslib_es6","userApi","user","account","pwd","password","guest","undefined","retUser","_a","sent","alert","logined","prototype","internalStart","openVPage","register_AccountPage","toVerify","register_VerifyPage","toPassword","register_PasswordPage","toSuccess","register_RegSuccess","regReturn","registerReturn","msg","checkAccount","Promise","isExists","ret","error","accountError","setVerify","execute","params","nick","country","mobile","mobileCountry","email","verify","Number","register","clear","register_ForgetController","ForgetController","resetPassword","AccountPage","schema","name","required","maxLength","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","open","items","widget","label","placeholder","openPage","VerifyPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","typeText","extra","PasswordPage","values","form","data","rePwd","setValue","push","RegSuccess","onClick","login_Login","Login","username","console","log","token","props","callback","clickReg","start","clickForget","render","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.508f3129.chunk.js","sourcesContent":["import { Res } from '../../components';\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from '../../components';\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { nav, mobileRegex, emailRegex } from '../components';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport function tonvaTop() {\r\n    return nav.loginTop(<div className=\"d-flex align-items-center\">\r\n        <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n            <span className=\"text-danger\">花</span>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\n\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\r\n    {type:'email', caption:'邮箱', regex: emailRegex}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../components';\r\nimport { userApi, RegisterParameter } from './userApi';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n/*\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n*/\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '注册账号';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login = async () => {\r\n        let retUser = await userApi.login({user: this.account, pwd: this.password, guest: nav.guest});\r\n        if (retUser === undefined) {\r\n            alert('something wrong!');\r\n            return;\r\n        }\r\n        await nav.logined(retUser);\r\n    }\r\n\r\n    private regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: \r\n                return '服务器发生错误';\r\n            case 4:\r\n                return '验证码错误';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry=86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        let error = this.regReturn(ret)\r\n        return error;\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop()}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter} \r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        let error:string;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            error = '密码错误，请重新输入密码！';\r\n            context.setError('pwd', error);\r\n        }\r\n        else {\r\n            this.controller.password = pwd;\r\n            error = await this.controller.execute();\r\n            if (error !== undefined) {\r\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText, login} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" type=\"button\" onClick={login}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../components';\r\nimport { RegisterController, ForgetController } from './register';\r\nimport { userApi } from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../tool/user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>;\r\n    //top?: any;\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem,\r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un,\r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'password') {\r\n            return await this.onSubmit('login', context);\r\n        }\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"w-20c\">\r\n                    {tonvaTop()}\r\n                    <div className=\"h-2c\" />\r\n                    <Form schema={schema} uiSchema={this.uiSchema} \r\n                        onButtonClick={this.onSubmit} \r\n                        onEnter={this.onEnter}\r\n                        requiredFlag={false} />\r\n                    <button className=\"btn btn-link btn-block\"\r\n                        onClick={() => this.clickForget()}>\r\n                        忘记密码\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"flex-fill\" />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}